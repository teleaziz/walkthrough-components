/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@ionic/core';
import 'ionicons';

import {
  Options,
} from 'intro.js';

declare global {

  namespace StencilComponents {
    interface LkPlayground {

    }
  }

  interface HTMLLkPlaygroundElement extends StencilComponents.LkPlayground, HTMLStencilElement {}

  var HTMLLkPlaygroundElement: {
    prototype: HTMLLkPlaygroundElement;
    new (): HTMLLkPlaygroundElement;
  };
  interface HTMLElementTagNameMap {
    'lk-playground': HTMLLkPlaygroundElement;
  }
  interface ElementTagNameMap {
    'lk-playground': HTMLLkPlaygroundElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lk-playground': JSXElements.LkPlaygroundAttributes;
    }
  }
  namespace JSXElements {
    export interface LkPlaygroundAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LkWalkthrough {
      'options': Options;
      'show': boolean;
    }
  }

  interface HTMLLkWalkthroughElement extends StencilComponents.LkWalkthrough, HTMLStencilElement {}

  var HTMLLkWalkthroughElement: {
    prototype: HTMLLkWalkthroughElement;
    new (): HTMLLkWalkthroughElement;
  };
  interface HTMLElementTagNameMap {
    'lk-walkthrough': HTMLLkWalkthroughElement;
  }
  interface ElementTagNameMap {
    'lk-walkthrough': HTMLLkWalkthroughElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lk-walkthrough': JSXElements.LkWalkthroughAttributes;
    }
  }
  namespace JSXElements {
    export interface LkWalkthroughAttributes extends HTMLAttributes {
      'onIntroEvent'?: (event: CustomEvent) => void;
      'options'?: Options;
      'show'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LkWalkthroughCreator {
      'contentId': string;
      'split': boolean;
    }
  }

  interface HTMLLkWalkthroughCreatorElement extends StencilComponents.LkWalkthroughCreator, HTMLStencilElement {}

  var HTMLLkWalkthroughCreatorElement: {
    prototype: HTMLLkWalkthroughCreatorElement;
    new (): HTMLLkWalkthroughCreatorElement;
  };
  interface HTMLElementTagNameMap {
    'lk-walkthrough-creator': HTMLLkWalkthroughCreatorElement;
  }
  interface ElementTagNameMap {
    'lk-walkthrough-creator': HTMLLkWalkthroughCreatorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lk-walkthrough-creator': JSXElements.LkWalkthroughCreatorAttributes;
    }
  }
  namespace JSXElements {
    export interface LkWalkthroughCreatorAttributes extends HTMLAttributes {
      'contentId'?: string;
      'onUpdate'?: (event: CustomEvent) => void;
      'split'?: boolean;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;